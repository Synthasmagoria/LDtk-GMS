/// ldtk_generate_rooms(path)
var path = argument0;

/*
    This script will turn a ldtk level into rooms (one per level)
*/

var _world_name = __ldtk_iutil_string_get_filename_from_path(path, false);
var _world_directory = __ldtk_iutil_string_get_directory_from_path(path);

DerpXml_Init();

var world = ldtk_world_read(path);

if (world == -1)
{
    exit;
}

var world_data = ldtk_world_prepare(world);

// NOTE: This makes sure that when converting ldtk worlds to rooms instances and tiles start in the top left position of the room
var relative_previous = ldtk_level_relativity_get();
ldtk_level_relativity_set(false);

var _level, _level_data, _level_instance;
for (var i = 0, n = ldtk_world_get_level_count(world); i < n; i++)
{
    DerpXmlWrite_New();
    _level = ldtk_world_get_level(world, i);
    _level_data = ldtk_level_prepare(world, _level, world_data);
    
    DerpXmlWrite_Comment("This Document is generated by LDtk2Gm, if you edit it by hand then you do so at your own risk!")
    
    var _room_start_code = "";
    var _room_start_script = ds_map_find_value(_level_data, "room_start_script");
    if (_room_start_script != -1)
        _room_start_code = script_get_name(_room_start_script) + "();";
    
    DerpXmlWrite_OpenTag("room");
        DerpXmlWrite_LeafElement("caption", "");
        DerpXmlWrite_LeafElement("width", string(ldtk_level_get_width(_level)));
        DerpXmlWrite_LeafElement("height", string(ldtk_level_get_height(_level)));
        DerpXmlWrite_LeafElement("vsnap", "16");
        DerpXmlWrite_LeafElement("hsnap", "16");
        DerpXmlWrite_LeafElement("isometric", "0");
        DerpXmlWrite_LeafElement("speed", "50");
        DerpXmlWrite_LeafElement("persistent", "0");
        DerpXmlWrite_LeafElement("colour", string(c_gray));
        DerpXmlWrite_LeafElement("showcolour", "-1");
        DerpXmlWrite_LeafElement("code", _room_start_code);
        DerpXmlWrite_LeafElement("enableViews", "-1");
        DerpXmlWrite_LeafElement("clearViewBackground", "-1");
        DerpXmlWrite_LeafElement("clearDisplayBuffer", "-1");
        
        DerpXmlWrite_OpenTag("makerSettings");
            DerpXmlWrite_LeafElement("isSet", "0");
            DerpXmlWrite_LeafElement("w", "800");
            DerpXmlWrite_LeafElement("h", "608");
            DerpXmlWrite_LeafElement("showGrid", "0");
            DerpXmlWrite_LeafElement("showObjects", "0");
            DerpXmlWrite_LeafElement("showTiles", "0");
            DerpXmlWrite_LeafElement("showBackgrounds", "0");
            DerpXmlWrite_LeafElement("showForegrounds", "0");
            DerpXmlWrite_LeafElement("showViews", "0");
            DerpXmlWrite_LeafElement("deleteUnderlyingObj", "0");
            DerpXmlWrite_LeafElement("deleteUnderlyingTiles", "0");
            DerpXmlWrite_LeafElement("page", "0");
            DerpXmlWrite_LeafElement("xoffset", "0");
            DerpXmlWrite_LeafElement("yoffset", "0");
        DerpXmlWrite_CloseTag();
        
        DerpXmlWrite_OpenTag("backgrounds");
            for (var ii = 0; ii < 8; ii++)
            {
                DerpXmlWrite_LeafElement("background", "");
                    DerpXmlWrite_Attribute("visible", "0");
                    DerpXmlWrite_Attribute("foreground", "0");
                    DerpXmlWrite_Attribute("name", "");
                    DerpXmlWrite_Attribute("x", "0");
                    DerpXmlWrite_Attribute("y", "0");
                    DerpXmlWrite_Attribute("htiled", "-1");
                    DerpXmlWrite_Attribute("vtiled", "-1");
                    DerpXmlWrite_Attribute("hspeed", "0");
                    DerpXmlWrite_Attribute("vspeed", "0");
                    DerpXmlWrite_Attribute("stretch", "0");
            }
        DerpXmlWrite_CloseTag();
        
        DerpXmlWrite_OpenTag("views");
            DerpXmlWrite_LeafElement("view", "");
                DerpXmlWrite_Attribute("visible", "1");
                DerpXmlWrite_Attribute("objName", "&lt;undefined&gt;");
                DerpXmlWrite_Attribute("xview", "0");
                DerpXmlWrite_Attribute("yview", "0");
                DerpXmlWrite_Attribute("wview", "800");
                DerpXmlWrite_Attribute("hview", "608");
                DerpXmlWrite_Attribute("xport", "0");
                DerpXmlWrite_Attribute("yport", "0");
                DerpXmlWrite_Attribute("wport", "800");
                DerpXmlWrite_Attribute("hport", "608");
                DerpXmlWrite_Attribute("hborder", "32");
                DerpXmlWrite_Attribute("vborder", "32");
                DerpXmlWrite_Attribute("hspeed", "-1");
                DerpXmlWrite_Attribute("vspeed", "-1");
            
            for (var ii = 1; ii < 8; ii++)
            {
                DerpXmlWrite_LeafElement("view", "");
                    DerpXmlWrite_Attribute("visible", "0");
                    DerpXmlWrite_Attribute("objName", "&lt;undefined&gt;");
                    DerpXmlWrite_Attribute("xview", "0");
                    DerpXmlWrite_Attribute("yview", "0");
                    DerpXmlWrite_Attribute("wview", "800");
                    DerpXmlWrite_Attribute("hview", "608");
                    DerpXmlWrite_Attribute("xport", "0");
                    DerpXmlWrite_Attribute("yport", "0");
                    DerpXmlWrite_Attribute("wport", "800");
                    DerpXmlWrite_Attribute("hport", "608");
                    DerpXmlWrite_Attribute("hborder", "32");
                    DerpXmlWrite_Attribute("vborder", "32");
                    DerpXmlWrite_Attribute("hspeed", "-1");
                    DerpXmlWrite_Attribute("vspeed", "-1");
            }
        DerpXmlWrite_CloseTag();
            
        DerpXmlWrite_OpenTag("instances");
            var
            _light_instances = ds_map_find_value(_level_data, "light_instances"),
            _id = 1 << 15,
            _inst;
            for (var ii = 0, nn = ds_list_size(_light_instances); ii < nn; ii++)
            {
                _inst = ds_list_find_value(_light_instances, ii);
                DerpXmlWrite_LeafElement("instance", "");
                    DerpXmlWrite_Attribute("objName", object_get_name(ds_map_find_value(_inst, "object_index")));
                    DerpXmlWrite_Attribute("x", string(ds_map_find_value(_inst, "x")));
                    DerpXmlWrite_Attribute("y", string(ds_map_find_value(_inst, "y")));
                    DerpXmlWrite_Attribute("name", "inst_" + string(ptr(_id)));
                    DerpXmlWrite_Attribute("locked", "0");
                    DerpXmlWrite_Attribute("code", "");
                    DerpXmlWrite_Attribute("scaleX", string(ds_map_find_value(_inst, "image_xscale")));
                    DerpXmlWrite_Attribute("scaleY", string(ds_map_find_value(_inst, "image_yscale")));
                    DerpXmlWrite_Attribute("colour", string(__ldtk_iutil_color_to_int(c_white, 1)));
                    DerpXmlWrite_Attribute("rotation", "0");
                    _id++;
            }
            var _instances = ds_map_find_value(_level_data, "instances");
            var _creation_code, _instance_variables, _instance_variable, _lua_creation_code;
            for (var ii = 0, nn = ds_list_size(_instances); ii < nn; ii++)
            {
                _inst = ds_list_find_value(_instances, ii);
                DerpXmlWrite_LeafElement("instance", "");
                    DerpXmlWrite_Attribute("objName", object_get_name(ds_map_find_value(_inst, "object_index")));
                    DerpXmlWrite_Attribute("x", string(ds_map_find_value(_inst, "x")));
                    DerpXmlWrite_Attribute("y", string(ds_map_find_value(_inst, "y")));
                    DerpXmlWrite_Attribute("name", "inst_" + string(ptr(_id)));
                    DerpXmlWrite_Attribute("locked", "0");
                    _creation_code = "";
                    var _lua_creation_code = ds_map_find_value(_inst, "creation_code");
                    if (_lua_creation_code != undefined && _lua_creation_code != "")
                        _creation_code += string_replace_all(_lua_creation_code, "\n", "&#xA;");
                    _instance_variables = ds_map_find_value(_inst, "instance_variables");
                    for (var iii = 0, nnn = ds_list_size(_instance_variables); iii < nnn; iii++)
                    {
                        _instance_variable = ds_list_find_value(_instance_variables, iii);
                        _creation_code += ds_map_find_value(_instance_variable, "name") + "=" + string(ds_map_find_value(_instance_variable, "value")) + ";";
                    }
                    DerpXmlWrite_Attribute("code", _creation_code);
                    DerpXmlWrite_Attribute("scaleX", string(ds_map_find_value(_inst, "image_xscale")));
                    DerpXmlWrite_Attribute("scaleY", string(ds_map_find_value(_inst, "image_yscale")));
                    DerpXmlWrite_Attribute("colour", string(__ldtk_iutil_color_to_int(c_white, 1)));
                    DerpXmlWrite_Attribute("rotation", "0");
                    _id++;
            }
        DerpXmlWrite_CloseTag();
        
        DerpXmlWrite_OpenTag("tiles");
            var _tile_layers = ds_map_find_value(_level_data, "tile_layers")
            var _tile_layer, _tile_list, _tile, _flip, _grid, _id = 1 << 15;
            for (var iii = 0, nnn = ds_list_size(_tile_layers); iii < nnn; iii++)
            {
                _tile_layer = ds_list_find_value(_tile_layers, iii);
                _tile_list = ds_map_find_value(_tile_layer, "tiles");
                _grid = ds_map_find_value(_tile_layer, "grid");
                
                for (var iiii = 0, nnnn = ds_list_size(_tile_list); iiii < nnnn; iiii++)
                {
                    _tile = ds_list_find_value(_tile_list, iiii);
                    _flip = ds_map_find_value(_tile, "f");
                    DerpXmlWrite_LeafElement("tile", "");
                        DerpXmlWrite_Attribute("bgName", background_get_name(ds_map_find_value(_tile_layer, "background")));
                        DerpXmlWrite_Attribute("x", string(ds_list_find_value(ds_map_find_value(_tile, "px"), 0) + _grid * __ldtk_iutil_int_get_bit(_flip, 0)));
                        DerpXmlWrite_Attribute("y", string(ds_list_find_value(ds_map_find_value(_tile, "px"), 1) + _grid * __ldtk_iutil_int_get_bit(_flip, 1)));
                        DerpXmlWrite_Attribute("w", string(_grid));
                        DerpXmlWrite_Attribute("h", string(_grid));
                        DerpXmlWrite_Attribute("xo", string(ds_list_find_value(ds_map_find_value(_tile, "src"), 0)));
                        DerpXmlWrite_Attribute("yo", string(ds_list_find_value(ds_map_find_value(_tile, "src"), 1)));
                        DerpXmlWrite_Attribute("id", string(10000000 + _id));
                        DerpXmlWrite_Attribute("name", "inst_" + string(ptr(_id)));
                        DerpXmlWrite_Attribute("depth", string(ds_map_find_value(_tile_layer, "depth")));
                        DerpXmlWrite_Attribute("locked", "0");
                        DerpXmlWrite_Attribute("colour", __ldtk_iutil_color_to_int(c_white, 1));
                        DerpXmlWrite_Attribute("scaleX", string(1 - __ldtk_iutil_int_get_bit(_flip, 0) * 2));
                        DerpXmlWrite_Attribute("scaleY", string(1 - __ldtk_iutil_int_get_bit(_flip, 1) * 2));
                    _id++;
                }
            }
        DerpXmlWrite_CloseTag();
        
        DerpXmlWrite_LeafElement("PhysicsWorld", "0");
        DerpXmlWrite_LeafElement("PhysicsWorldTop", "0");
        DerpXmlWrite_LeafElement("PhysicsWorldLeft", "0");
        DerpXmlWrite_LeafElement("PhysicsWorldRight", "1024");
        DerpXmlWrite_LeafElement("PhysicsWorldBottom", "786");
        DerpXmlWrite_LeafElement("PhysicsWorldGravityX", "0");
        DerpXmlWrite_LeafElement("PhysicsWorldGravityY", "10");
        DerpXmlWrite_LeafElement("PhysicsWorldPixToMeters", "0.100000001490116");
    DerpXmlWrite_CloseTag();
    
    DerpXmlWrite_ToFile(_world_name + "_" + string(i) + ".room.gmx");
    DerpXmlWrite_UnloadBuffer();
    
    ds_map_destroy(_level_data);
}

ldtk_level_relativity_set(relative_previous);

ds_map_destroy(world);
ds_map_destroy(world_data);
